import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.primaryContainer,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(5.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.gray400,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.gray500,
          fontSize: 16.fSize,
          fontFamily: 'Outfit',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: 15.fSize,
          fontFamily: 'Comfortaa',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.black900,
          fontSize: 12.fSize,
          fontFamily: 'Outfit',
          fontWeight: FontWeight.w400,
        ),
        displayLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 52.fSize,
          fontFamily: 'Gamja Flower',
          fontWeight: FontWeight.w400,
        ),
        displayMedium: TextStyle(
          color: appTheme.deepOrange50,
          fontSize: 42.fSize,
          fontFamily: 'Amiri Quran Colored',
          fontWeight: FontWeight.w400,
        ),
        headlineMedium: TextStyle(
          color: appTheme.gray500,
          fontSize: 26.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        headlineSmall: TextStyle(
          color: appTheme.black900,
          fontSize: 24.fSize,
          fontFamily: 'Comfortaa',
          fontWeight: FontWeight.w400,
        ),
        labelLarge: TextStyle(
          color: colorScheme.primaryContainer,
          fontSize: 13.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: appTheme.gray700,
          fontSize: 16.fSize,
          fontFamily: 'Outfit',
          fontWeight: FontWeight.w500,
        ),
        titleSmall: TextStyle(
          color: colorScheme.onSecondaryContainer,
          fontSize: 14.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF0B6EFE),
    primaryContainer: Color(0XFFFFFFFF),
    secondaryContainer: Color(0XFF4B4747),

    // Error colors
    errorContainer: Color(0XFF333333),
    onError: Color(0XFF555151),

    // On colors(text colors)
    onPrimary: Color(0XFF03063A),
    onPrimaryContainer: Color(0XFF292D32),
    onSecondaryContainer: Color(0XFF040404),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber100 => Color(0XFFFFE9C2);
  Color get amber300 => Color(0XFFFDD153);

  // Black
  Color get black900 => Color(0XFF000000);

  // Blue
  Color get blue100 => Color(0XFFC2EBFF);
  Color get blue300 => Color(0XFF64ADEF);
  Color get blue30001 => Color(0XFF5AA9EF);
  Color get blue30002 => Color(0XFF5BA9EF);
  Color get blue400 => Color(0XFF52ACFF);
  Color get blue500 => Color(0XFF3394EB);
  Color get blue50001 => Color(0XFF3198F4);
  Color get blueA100 => Color(0XFF79B9F2);
  Color get blueA10001 => Color(0XFF7AB8F1);
  Color get blueA400 => Color(0XFF1977F3);

  // BlueGray
  Color get blueGray100 => Color(0XFFD9D9D9);

  // DeepOrange
  Color get deepOrange100 => Color(0XFFFFCEC2);
  Color get deepOrange200 => Color(0XFFFCB097);
  Color get deepOrange20001 => Color(0XFFFDB098);
  Color get deepOrange300 => Color(0XFFF98F6D);
  Color get deepOrange50 => Color(0XFFFFE3D6);
  Color get deepOrangeA200 => Color(0XFFFF6636);

  // Gray
  Color get gray100 => Color(0XFFF7F7F8);
  Color get gray200 => Color(0XFFEBE9EB);
  Color get gray400 => Color(0XFFC5C0C0);
  Color get gray40000 => Color(0X00C4C4C4);
  Color get gray50 => Color(0XFFFCFCFC);
  Color get gray500 => Color(0XFFA1A1A1);
  Color get gray600 => Color(0XFF887E7E);
  Color get gray60001 => Color(0XFF70717B);
  Color get gray60002 => Color(0XFF6E6E6E);
  Color get gray700 => Color(0XFF625B5B);
  Color get gray800 => Color(0XFF4B4646);

  // Green
  Color get green400 => Color(0XFF48D26F);

  // LightBlue
  Color get lightBlue100 => Color(0XFFA3E1FF);

  // LightGreen
  Color get lightGreen100 => Color(0XFFDFF2C9);
  Color get lightGreen10001 => Color(0XFFE2F5CB);
  Color get lightGreen200 => Color(0XFFC9ECA0);
  Color get lightGreen20001 => Color(0XFFCAEDA1);

  // Orange
  Color get orangeA100 => Color(0XFFFFD68F);
  Color get orangeA200 => Color(0XFFFCA93F);

  // Pink
  Color get pinkA200 => Color(0XFFFF5A79);

  // Purple
  Color get purple200 => Color(0XFFE089D0);
  Color get purpleA100 => Color(0XFFF79AEE);

  // Red
  Color get red500 => Color(0XFFEB4335);

  // Yellow
  Color get yellow700 => Color(0XFFF5C02D);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
